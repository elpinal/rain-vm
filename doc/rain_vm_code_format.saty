@require: stdja
@require: tabular

StdJa.document (|
  title = {Rain VM Code Format};
  author = {El Pin Al};
  show-title = true;
  show-toc = false;
|) '<
  +p {
    In Rain VM, each word is composed of 4 bytes.
    Words are represented in big-endian format.
  }

  +p {
    There are 32 registers.
  }

  +section {How programs are executed} <
    +p {
      The first byte of an input program denotes the \emph{byte version}.
      There is a correspondence between byte versions and \emph{dominant versions}.
    }

    +p {
      \tabular(fun cellf multif empty -> [
        [cellf {Byte Version}; cellf {Dominant Version}];
        [cellf {0}           ; cellf {unused}];
        [cellf {1}           ; cellf {0.1.0}];
      ])(fun xs ys -> (
          match (ys, List.reverse ys) with
          | (y0 :: y1 :: _, ylast :: _) ->
              ( match (xs, List.reverse xs) with
                | (x0 :: x1 :: _, xlast :: _) ->
                    let grlstY1 =
                      [y1] |> List.map (fun y ->
                        stroke 0.5pt Color.black (Gr.line (x0, y) (xlast, y)))
                    in
                    let grlstY2 =
                      [y0; ylast] |> List.map (fun y ->
                        stroke 1pt Color.black (Gr.line (x0, y) (xlast, y)))
                    in
                    let grlstX =
                      [x1] |> List.map (fun x ->
                        stroke 0.5pt Color.black (Gr.line (x, y0) (x, ylast)))
                    in
                    (stroke 0.5pt Color.black (Gr.line (x0, y1) (x1, y1)))
                      :: (List.append grlstX (List.append grlstY1 grlstY2))

                | _ -> []
              )
          | _ -> []
      ));
    }

    +p {
      If the dominant version of the first byte does not match the version of Rain VM,
      the execution of the program halts.
    }

    +p {
      After passing the version check, then the body of the program is executed.
      The first byte of the body contains an opcode.
      An opcode is the 5 most significant bits.
      Currently, the only opcodes are 0, indicating "move" instruction,
      1, indicating "halt" instruction,
      and 2, indicating "add" instruction.

      \emph{The result register}, R0, is a special register whose content is treated as the output of the execution.
      Reading instructions until reaching a "halt" instruction, and then the execution ends successfully.
    }
  >
>
