@require: stdja
@require: table

@import: notation

StdJa.document (|
  title = {Rain VM Code Format};
  author = {El Pin Al};
  show-title = true;
  show-toc = false;
|) '<
  +p {
    In Rain VM, each word is composed of 4 bytes.
    Words are represented in big-endian format.
  }

  +p {
    There are 32 registers.
  }

  +section {How programs are executed} <
    +p {
      The first byte of an input program denotes the \emph{byte version}.
      There is a correspondence between byte versions and \emph{dominant versions}.
    }

    +p {
      \tabular(fun t -> (
      let (c, l, r) = (t#c, t#l, t#r) in
      let m = t#m in
      let e = t#e in
      [
        [c {Byte Version}; c {Dominant Version}];
        [c {0}           ; c {unused}];
        [c {1}           ; c {0.1.0}];
      ]))(fun xs ys -> (
        let thin = 0.5pt in
        let thick = 1pt in
          match (ys, List.reverse ys) with
          | (y0 :: y1 :: _, ylast :: _) ->
              ( match (xs, List.reverse xs) with
                | (x0 :: x1 :: _, xlast :: _) ->
                    let grlstY1 =
                      [y1] |> List.map (fun y ->
                        stroke thin Color.black (Gr.line (x0, y) (xlast, y)))
                    in
                    let grlstY2 =
                      [y0; ylast] |> List.map (fun y ->
                        stroke thick Color.black (Gr.line (x0, y) (xlast, y)))
                    in
                    let grlstX =
                      [x1] |> List.map (fun x ->
                        stroke thin Color.black (Gr.line (x, y0) (x, ylast)))
                    in
                    stroke thin Color.black (Gr.line (x0, y1) (x1, y1))
                      :: List.append grlstX (List.append grlstY1 grlstY2)

                | _ -> []
              )
          | _ -> []
      ));
    }

    +p {
      If the dominant version of the first byte does not match the version of Rain VM,
      the execution of the program halts.
    }

    +p {
      After passing the version check, then the body of the program is executed.
      The first byte of the body contains an opcode.
      An opcode is the 5 most significant bits.
      Currently, the available opcodes are 0, indicating \quote{move} instruction,
      1, indicating \quote{halt} instruction,
      2, indicating \quote{add} instruction,
      and 3, indicating \quote{bnz} (\italic{branch if not zero}) instruction.

      \emph{The result register}, R0, is a special register whose content is treated as the output of the execution.
      Reading instructions until reaching a \quote{halt} instruction, and then the execution ends successfully.
    }
  >
>
