@require: stdja
@require: tabular

StdJa.document (|
  title = {Rain VM Code Format};
  author = {El Pin Al};
  show-title = true;
  show-toc = false;
|) '<
  +p {
    The first byte of an input program denotes the byte version.
    There is a correspondence between byte versions and dominant versions.
  }

  +p {
    \tabular(fun cellf multif empty -> [
      [cellf {Byte Version}; cellf {Dominant Version}];
      [cellf {0}           ; cellf {unused}];
      [cellf {1}           ; cellf {0.1.0}];
    ])(fun xs ys -> (
        match (ys, List.reverse ys) with
        | (y0 :: y1 :: _, ylast :: _) ->
            ( match (xs, List.reverse xs) with
              | (x0 :: x1 :: _, xlast :: _) ->
                  let grlstY1 =
                    [y1] |> List.map (fun y ->
                      stroke 0.5pt Color.black (Gr.line (x0, y) (xlast, y)))
                  in
                  let grlstY2 =
                    [y0; ylast] |> List.map (fun y ->
                      stroke 1pt Color.black (Gr.line (x0, y) (xlast, y)))
                  in
                  let grlstX =
                    [x1] |> List.map (fun x ->
                      stroke 0.5pt Color.black (Gr.line (x, y0) (x, ylast)))
                  in
                  (stroke 0.5pt Color.black (Gr.line (x0, y1) (x1, y1)))
                    :: (List.append grlstX (List.append grlstY1 grlstY2))

              | _ -> []
            )
        | _ -> []
    ));
  }

  +p {
    If the dominant version of the first byte does not match the version of Rain VM,
    the execution of the program halts.
  }

  +p {
    If the version check passed, the body of the program is executed.
    The first byte of the body (that is, the second byte of the program) will be placed into the result register, R0.
    The result register is a special register whose content is treated as the output of the execution.
    After reading the first byte of the body, the execution ends successfully.
  }
>
